#!/bin/bash

# Version: 1.3
# coded by Uruk and Basst

#Variable / Function

LOG_FILE=/var/log/update-$HOSTNAME.log    # <- change location for logfile if you want

#Header
function HEADER_INFO {
  cat <<"EOF"
   __  __          __      __          __   _  ________
  / / / /___  ____/ /___ _/ /____     / /  | |/ / ____/   by Uruk and BassT23
 / / / / __ \/ __  / __ `/ __/ _ \   / /   |   / /
/ /_/ / /_/ / /_/ / /_/ / /_/  __/  / /___/   / /___
\____/ .___/\__,_/\__,_/\__/\___/  /_____/_/|_\____/      Version 1.3
    /_/
           https://github.com/BassT23/LXC-Update
EOF
}

#Colors
set -e
YW=$(echo "\033[33m")
BL=$(echo "\033[36m")
RD=$(echo "\033[01;31m")
CM='\xE2\x9C\x94\033'
GN=$(echo "\033[1;92m")
CL=$(echo "\033[m")

#Container Update
function UPDATE_CONTAINER() {
  CONTAINER=$1
  clear
  HEADER_INFO
  NAME=`pct exec $CONTAINER hostname`
  echo -e "\n${BL}[Info]${GN} Updating LXC ${BL}$CONTAINER${CL} : ${GN}$NAME${CL} \n"
  pct config $CONTAINER > temp
  os=`awk '/^ostype/' temp | cut -d' ' -f2`
  if [ "$os" == "alpine" ]; then
        pct exec $CONTAINER -- bash -c "apk upgrade"
  elif [ "$os" == "ubuntu" ] || [ "$os" == "debian" ] || [ "$os" == "devuan" ]; then
        pct exec $CONTAINER -- bash -c "apt-get update && apt-get upgrade -y && apt-get clean && apt-get --purge autoremove -y"
  elif [ "$os" == "fedora" ]; then
        pct exec $CONTAINER -- bash -c "dnf -y update && dnf -y upgrade && dnf -y --purge autoremove"
  elif [ "$os" == "archlinux" ]; then
        pct exec $CONTAINER -- bash -c "pacman -Syyu --noconfirm"
  else
        pct exec $CONTAINER -- bash -c "yum -y update"
  fi
}

# Logging
touch $LOG_FILE
exec &> >(tee "$LOG_FILE")

# Error/Exit
set -e
function EXIT() {
  EXIT_CODE=$?
  # Update Finish
  if [[ "$EXIT_CODE" = "0" ]]; then
    printf "\n${GN} Finished, All Containers Updated. ${CL} \n\n"
  # Update Error
  else
    printf "\n${RD}Error during Update --- Exit Code: $EXIT_CODE ${CL}\n\n"
  fi
}

# Exit Code
  trap EXIT EXIT

#Start script
export TERM=xterm-256color
clear
HEADER_INFO

CONTAINERS=$(pct list | tail -n +2 | cut -f1 -d' ')

for CONTAINER in $CONTAINERS; do
  status=$(pct status $CONTAINER)
  if [ "$status" == "status: stopped" ]; then
      echo -e "${BL}[Info]${GN} Starting${BL} $CONTAINER ${CL} \n"
      pct start $CONTAINER
      echo -e "${BL}[Info]${GN} Waiting For${BL} $CONTAINER${CL}${GN} To Start ${CL} \n"
      sleep 5
      UPDATE_CONTAINER $CONTAINER
      echo -e "${BL}[Info]${GN} Shutting down${BL} $CONTAINER ${CL} \n"
      pct shutdown $CONTAINER &
    elif [ "$status" == "status: running" ]; then
      UPDATE_CONTAINER $CONTAINER
  fi
done
sleep 5
rm -rf temp
clear
HEADER_INFO

exit 0
