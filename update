#!/bin/bash
#Variable / Function

LOG_FILE=/var/log/update-$HOSTNAME.log    # <- change location for logfile if you want

#General
VERSION=2.1.1

#Header Cluster Mode
function HEADER_INFO {
  clear
  echo -e "\n"
  cat <<'EOF'
   __  __          __      __          __   _  ________
  / / / /___  ____/ /___ _/ /____     / /  | |/ / ____/
 / / / / __ \/ __  / __ `/ __/ _ \   / /   |   / /             from
/ /_/ / /_/ / /_/ / /_/ / /_/  __/  / /___/   / /___     BassT23 and Uruk
\____/ .___/\____/\____/\__/\___/  /_____/_/|_\____/
    /_/
          https://github.com/BassT23/LXC-Update
EOF
  echo
  echo -e "*** Version:  $VERSION  ***" | sed  -e :a -e "s/^.\{1,$(tput cols)\}$/ & /;ta" | tr -d '\n' | head -c $(tput cols)
  echo -e "*** Mode: $MODE ***" | sed  -e :a -e "s/^.\{1,$(tput cols)\}$/ & /;ta" | tr -d '\n' | head -c $(tput cols)
  echo
}

#Colors
YW='\033[33m'
BL='\033[36m'
RD='\033[01;31m'
CM='\xE2\x9C\x94\033'
GN='\033[1;92m'
CL='\033[m'

#Update with Extras
while getopts 12xh opt 2>/dev/null
do
  case $opt in
    1) HOST_MODE=1;;
    2) CLUSTER_MODE=1;;
    x) RICM=1;; # Run In Cluster Mode
    h) echo -e "\nOptions: \
                 \n-1   Host Mode\
                 \n-2   Cluster Mode\n"
       exit 1;;
    ?) echo -e "Wrong option! (-h for Help)"
       exit 1
  esac
done

#Check Cluster Mode
if [ -f "/etc/corosync/corosync.conf" ]; then
  HOSTS=$(grep ring0_addr /etc/corosync/corosync.conf | cut -c17-)
fi

#Host Update
function UPDATE_HOST() {
  HOST=$1
  echo -e "\n${BL}[Info]${GN} Updating${CL} : ${GN}$HOST${CL}"
  ssh $HOST 'bash -s' < $0 -- -1x
}

#Host Update Start
function HOST_UPDATE_START() {
  for HOST in $HOSTS; do
    UPDATE_HOST $HOST
  done
}

#Container Update
function UPDATE_CONTAINER() {
  CONTAINER=$1
  NAME=`pct exec $CONTAINER hostname`
  echo -e "\n${BL}[Info]${GN} Updating LXC ${BL}$CONTAINER${CL} : ${GN}$NAME${CL} \n"
  pct config $CONTAINER > temp
  os=`awk '/^ostype/' temp | cut -d' ' -f2`
  if [ "$os" == "alpine" ]; then
        pct exec $CONTAINER -- bash -c "apk upgrade"
  elif [ "$os" == "ubuntu" ] || [ "$os" == "debian" ] || [ "$os" == "devuan" ]; then
        pct exec $CONTAINER -- bash -c "echo -e --- APT UPDATE --- && apt-get update && echo"
        pct exec $CONTAINER -- bash -c "echo -e --- APT UPGRADE --- && DEBIAN_FRONTEND=noninteractive apt-get dist-upgrade -y"
        pct exec $CONTAINER -- bash -c "DEBIAN_FRONTEND=noninteractive apt-get full-upgrade -y && echo"
        pct exec $CONTAINER -- bash -c "echo -e --- APT CLEANING --- && apt-get autoremove -y"
        pct exec $CONTAINER -- bash -c "apt-get --purge autoremove -y"
  elif [ "$os" == "fedora" ]; then
        pct exec $CONTAINER -- bash -c "echo -e --- DNF UPDATE --- && dnf -y update && echo"
        pct exec $CONTAINER -- bash -c "echo -e --- DNF UPGRATE --- && dnf -y upgrade && echo"
        pct exec $CONTAINER -- bash -c "echo -e --- DNF CLEANING --- && dnf -y --purge autoremove"
  elif [ "$os" == "archlinux" ]; then
        pct exec $CONTAINER -- bash -c "pacman -Syyu --noconfirm"
  else
        pct exec $CONTAINER -- bash -c "yum -y update"
  fi
}

#Container Update Start
function CONTAINER_UPDATE_START() {
  CONTAINERS=$(pct list | tail -n +2 | cut -f1 -d' ')
  for CONTAINER in $CONTAINERS; do
    status=$(pct status $CONTAINER)
    if [ "$status" == "status: stopped" ]; then
      echo -e "${BL}[Info]${GN} Starting${BL} $CONTAINER ${CL} \n"
      pct start $CONTAINER
      echo -e "${BL}[Info]${GN} Waiting For${BL} $CONTAINER${CL}${GN} To Start ${CL} \n"
      sleep 5
      UPDATE_CONTAINER $CONTAINER
      echo -e "${BL}[Info]${GN} Shutting down${BL} $CONTAINER ${CL} \n"
      pct shutdown $CONTAINER &
    elif [ "$status" == "status: running" ]; then
      UPDATE_CONTAINER $CONTAINER
    fi
  done
  rm -rf temp
}

# Logging
if [[ "$RICM" != "1" ]]; then
  touch $LOG_FILE
  exec &> >(tee "$LOG_FILE")
fi
function CLEAN_LOGFILE() {
  if [[ "$RICM" != "1" ]]; then
    tail -n +3 $LOG_FILE > tmp.log && mv tmp.log $LOG_FILE
    cat $LOG_FILE | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,3})*)?[mGK]//g" | tee $LOG_FILE
    chmod 640 $LOG_FILE
  fi
}

# Error/Exit
set -e
function EXIT() {
  EXIT_CODE=$?
  # Update Finish
  if [[ "$EXIT_CODE" = "0" ]]; then
    printf "\n${GN}Finished, All Containers Updated.${CL}\n\n"
    CLEAN_LOGFILE
    /root/Proxmox-Update/exit/passed.sh
  # Update Error
  else
    printf "\n${RD}Error during Update --- Exit Code: $EXIT_CODE ${CL}\n\n"
    CLEAN_LOGFILE
    /root/Proxmox-Update/exit/error.sh
  fi
}

# Exit Code
if [[ "$RICM" != "1" ]]; then
  trap EXIT EXIT
fi

#Update Start
export TERM=xterm-256color
if [[ -f "/etc/corosync/corosync.conf" && "$HOST_MODE" != "1" ]]; then
  MODE=" Cluster"
  HEADER_INFO
  HOST_UPDATE_START
else
  if [[ "$RICM" != "1" ]]; then
    MODE="  Host  "
    HEADER_INFO
  fi
  CONTAINER_UPDATE_START
fi
exit 0
